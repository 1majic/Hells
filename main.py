import datetime
import logging
from typing import Union
import traceback as tb

import requests
from aiogram.types import InputMediaPhoto
from cherrypy.process.wspbus import states

from utils.utils import EDIT_PANEL, BLACKLIST_EDIT, COUPONS_EDIT, MASS_MESSAGE
from keyboards import admin_markups as am

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode

from pyqiwip2p import QiwiP2P

from cfg.init import db as cfg_init
import config as cfg
from config import admins_id, helper_id

from db import init
from keyboards import markups

from keyboards import items_markups as im

from utils import utils
from utils import items_menu
from utils import chat

from admin_panel import new_user
import shutil

from utils.panel_config import discount_levels

States = utils.States

db = init.db
logging.basicConfig(level=logging.INFO)

p2p = QiwiP2P(auth_key=cfg.QIWI_TOKEN)

start_blacklist = cfg_init.get_blacklist()

blacklist = [1355517574, 1916245833] + start_blacklist[::]

coupon_discount = 1

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

config = init.db
throttled_rate = 1

Start_time = 30
Start = False
main_chat_id = "-1001505951005"

#


def check_blacklist(function_to_decorate):
    async def the_wrapper_around_the_original_function(message, **kwargs):
        global main_chat_id
        if message.from_user.id not in blacklist:
            chat_member = await bot.get_chat_member(main_chat_id, message.from_user.id)
            print(chat_member['status'])
            if chat_member['status'] != 'left':
                try:
                    await function_to_decorate(message)  # –°–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è
                except Exception as e:
                    if not kwargs:
                        kwargs = None
                    await bot.send_message(416702541, f'–û—à–∏–±–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n{kwargs}')
            else:
                keyboard = markups.subscribe_keyboard()
                await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –Ω–∞—Å.\n\n–ù–∞–∂–º–∏ üëáüèª", reply_markup=keyboard)
                await States.SUBSCRIBE_STATE.set()
        else:
            pass

    return the_wrapper_around_the_original_function


async def anti_flood(*args, **kwargs):
    pass


@dp.callback_query_handler(state=States.SUBSCRIBE_STATE)
async def subscribe_check(callback: types.CallbackQuery, state: FSMContext):
    global main_chat_id
    chat_member = await bot.get_chat_member(main_chat_id, callback.from_user.id)
    if chat_member['status'] != 'left':
        await callback.message.edit_text("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ /start", reply_markup=None)
        await state.finish()
    else:
        await callback.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª")


@dp.message_handler(state=States.SUBSCRIBE_STATE)
async def message_catcher(message):
    pass


@dp.message_handler(user_id=admins_id, commands=['cancel'], state='*')
@dp.throttled(anti_flood, rate=throttled_rate)
async def cancel(message: types.chat_photo, state: FSMContext):
    await state.finish()
    await message.answer('–û—Ç–º–µ–Ω–∞')
    #     await message.answer('–û—à–∏–±–∫–∞')
    #     await state.finish()


@dp.message_handler(user_id=admins_id, commands=['admin'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def help_menu(message: types.Message):
    string = '/edit_start_message - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n\n' \
             '/add_item - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n' \
             '/del_item - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n\n' \
             '/add_special_course - –î–æ–±–∞–≤–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n' \
             '/del_special_course - –£–¥–∞–ª–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n\n' \
             '/add_halfyear - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É–≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å\n' \
             '/del_halfyear - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É–≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å\n\n' \
             '/ban_list - C–ø–∏—Å–æ–∫ –∑–∞–±—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n' \
             '/ban "username" - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n' \
             '/unban "username" - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n\n' \
             '/add_coupon - –î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω\n' \
             '/del_coupon - –£–¥–∞–ª–∏—Ç—å –∫—É–ø–æ–Ω\n\n' \
             '/edit_admin_btn - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω"\n' \
             '/edit_reviews_btn - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–∑—ã–≤—ã"\n' \
             '/edit_chat_link - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ß–∞—Ç"\n' \
             '/edit_group_link - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ì—Ä—É–ø–ø–∞"\n\n' \
             '/add_category_image - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n' \
             '/add_subcategory_image - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n' \
             '/add_subject_image - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞\n' \
             '/add_special_course_image - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏\n' \
             '/add_halfyear_image - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ø–æ–ª—É–≥–æ–¥–æ–≤–∞–ª–æ–≥–æ –∫—É—Ä—Å–∞\n' \
             '/add_item_image - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞\n\n' \
             '/send_message - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n' \
             '/del_message - –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n' \
             '/cancel - –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è'

    await message.answer(string)


@dp.message_handler(user_id=admins_id, commands=['del_special_course'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_del_special_course(message: types.Message):
    await EDIT_PANEL.DEL_SPECIAL_COURSE.set()
    items = db.get_special_course_list()
    await message.answer('ID –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞|–¶–µ–Ω–∞|ID –∫–∞–Ω–∞–ª–∞')
    for i in items:
        await message.answer(i)
    await message.answer('–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ id –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.DEL_SPECIAL_COURSE)
@dp.throttled(anti_flood, rate=throttled_rate)
async def del_special_course(message: types.Message, state: FSMContext):
    try:
        db.del_special_course(message.text)
        await message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@db.callback_query_handler(user_id=admins_id, text_contains="add_course_")
async def add_course_callback(callback: types.CallbackQuery):
    category, subcategory, subject = str(callback.data)[11:].split(":")
    pass


@db.callback_query_handler(user_id=admins_id, text_contains="edit_course_")
async def edit_course_callback(callback: types.CallbackQuery):
    item = int(str(callback.data)[11:])
    markup = am.edit_buy_course(item)
    item_name, photo, description, price, chat_id = db.get_full_item(item)
    string = f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{item_name}</b>\n" \
             f"–û–ø–∏—Å–∞–Ω–∏–µ: <i>\n{description}</i>\n\n" \
             f"–¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>\n" \
             f"Chat Id: <code>{chat_id}</code>"

    await EDIT_PANEL.EDIT_ITEM.set()
    await callback.message.edit_caption(string, parse_mode=ParseMode.HTML, reply_markup=markup)


@db.callback_query_handler(user_id=admins_id, text_contains="edit_item_name_", state=EDIT_PANEL.EDIT_ITEM)
async def edit_item_name_callback(callback: types.CallbackQuery, state: FSMContext):
    item = int(str(callback.data)[15:])
    await EDIT_PANEL.EDIT_ITEM_NAME.set()
    await state.update_data(item=item)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.')
    await callback.message.delete()


@db.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_ITEM_NAME)
async def edit_item_name(message: types.Message, state: FSMContext):
    item = await state.get_data()
    name = message.text
    db.edit_item_name(item, name)
    await message.answer('–ò–∑–º–µ–Ω–µ–Ω–æ')
    await state.finish()


@db.callback_query_handler(user_id=admins_id, text_contains="edit_description_", state=EDIT_PANEL.EDIT_ITEM)
async def edit_description_callback(callback: types.CallbackQuery, state: FSMContext):
    item = int(str(callback.data)[17:])
    await EDIT_PANEL.EDIT_ITEM_DESCRIPTION.set()
    await state.update_data(item=item)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')


@db.message(user_id=admins_id, state=EDIT_PANEL.EDIT_ITEM_DESCRIPTION)
async def edit_description(message: types.Message, state: FSMContext):
    item = await state.get_data()
    description = message.text
    db.edit_item_description(item, description)
    await message.answer('–ò–∑–º–µ–Ω–µ–Ω–æ')


@db.callback_query_handler(user_id=admins_id, text_contains="edit_photo_", state=EDIT_PANEL.EDIT_ITEM)
async def edit_photo_callback(callback: types.CallbackQuery, state: FSMContext):
    item = int(str(callback.data)[17:])
    await EDIT_PANEL.EDIT_ITEM_IMAGE.set()
    await state.update_data(item=item)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ')


@db.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_ITEM_IMAGE, content_types=["photo"])
async def edit_photo(message: types.Message, state: FSMContext):
    item = await state.get_data()
    photo = message.photo[0].file_id
    db.add_item_image(photo, item)
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–æ")
    await state.finish()


@db.callback_query_handler(user_id=admins_id, text_contains="edit_price_", state=EDIT_PANEL.EDIT_ITEM)
async def edit_price_callback(callback: types.CallbackQuery, state: FSMContext):
    item = int(str(callback.data)[11:])
    await EDIT_PANEL.EDIT_ITEM_PRICE.set()
    await state.update_data(item=item)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É')


@db.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_ITEM_PRICE)
async def edit_price(message: types.Message, state: FSMContext):
    item = await state.get_data()
    price = message.text
    db.edit_item_price(item, price)
    await message.answer('–ò–∑–º–µ–Ω–µ–Ω–æ')
    await state.finish()


@db.callback_query_handler(user_id=admins_id, text_contains="chat_id_", state=EDIT_PANEL.EDIT_ITEM)
async def edit_chat_id_callback(callback: types.CallbackQuery, state: FSMContext):
    item = int(str(callback.data)[11:])
    await state.update_data(item=item)
    await EDIT_PANEL.EDIT_ITEM_CHAT_ID.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π chat_id')


@db.message_handler(user_id=admins_id, text_contains="chat_id_")
async def edit_chat_id(message: types.Message, state:FSMContext):
    item = await state.get_data()
    chat_id = message.text
    db.edit_item_chat_id(item, chat_id)
    await state.finish()
    await message.answer('–ò–∑–º–µ–Ω–µ–Ω–æ')


@db.callback_query_handler(user_id=admins_id, text_contains="del_course_", state=EDIT_PANEL.EDIT_ITEM)
async def del_course_callback(callback: types.CallbackQuery, state: FSMContext):
    item = int(str(callback.data)[11:])
    db.del_item(item)
    await callback.answer("–£–¥–∞–ª–µ–Ω–Ω–æ")
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['del_halfyear'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_del_halfyear(message: types.Message):
    await EDIT_PANEL.DEL_HALFYEAR.set()
    items = db.get_halfyear_list()
    await message.answer('ID –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞|–¶–µ–Ω–∞|ID –∫–∞–Ω–∞–ª–∞')
    for i in items:
        await message.answer(i)
    await message.answer('–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ id –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.DEL_HALFYEAR)
@dp.throttled(anti_flood, rate=throttled_rate)
async def del_halfyear(message: types.Message, state: FSMContext):
    try:
        db.del_halfyear(message.text)
        await message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.message_handler(user_id=admins_id, commands=['add_special_course'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_special_course(message: types.Message):
    await EDIT_PANEL.ADD_SPECIAL_COURSE.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ "–ø—É—Ç—å" –∫ —Ç–æ–≤–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–ù–∞–∑–≤–∞–Ω–∏–µ '
                         '—Ç–æ–≤–∞—Ä–∞|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞|ID –∫–∞–Ω–∞–ª–∞')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.ADD_SPECIAL_COURSE, content_types=['photo'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_special_course(message: types.Message, state: FSMContext):
    try:
        try:
            photo = message.photo[0].file_id
        except:
            photo = None
        item_name, description, price, chat_id = message.caption.split('|')
        db.add_special_course(item_name, description, photo, price, chat_id)
        await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['add_halfyear'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_halfyear(message: types.Message):
    try:
        await EDIT_PANEL.ADD_HALFYEAR.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ "–ø—É—Ç—å" –∫ —Ç–æ–≤–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–ù–∞–∑–≤–∞–Ω–∏–µ '
                             '—Ç–æ–≤–∞—Ä–∞//–û–ø–∏—Å–∞–Ω–∏–µ//–¶–µ–Ω–∞//ID –∫–∞–Ω–∞–ª–∞')
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.ADD_HALFYEAR, content_types=['photo'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_halfyear(message: types.Message, state: FSMContext):
    try:
        try:
            photo = message.photo[0].file_id
        except:
            photo = None
        item_name, description, price, chat_id = message.caption.split('//')
        db.add_halfyear(item_name, description, photo, price, chat_id)
        await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['send_message'])
async def set_send_message(message: types.Message):
    await MASS_MESSAGE.SEND_MASS_MESSAGE.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.')


@dp.message_handler(user_id=admins_id, state=MASS_MESSAGE.SEND_MASS_MESSAGE)
async def send_message(message: types.Message, state: FSMContext):
    try:
        await state.finish()
        message = message.text
        users = db.get_users_id()
        keyboard = markups.mass_keyboard()
        photo = 'AgACAgIAAxkBAAIJumIfttc46ZmKLPH3CS4_WVWQ69hXAAIhuDEbd2D5SPU72AsP32exAQADAgADcwADIwQ'
        string = "<b>–ò—Å—Ç–æ—Ä–∏—è & –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç —à–∫–æ–ª—ã SmitUp! –£–∂–µ–Ω –Ω–∞—á–∞–ª—Å—è –Ω–∞–±–æ—Ä –Ω–∞ –ú–ê–†–¢." \
                 "\n\n–ú–ê–°–¢–ï–†-–ì–†–£–ü–ü–ê –≠–ö–°–¢–†–ê –° –≠–ª–µ–π –°–º–∏—Ç ‚Äî —ç—Ç–æ:</b>" \
                 "\n<i>‚Äî 12-17 –∑–∞–Ω—è—Ç–∏–π –≤ –º–µ—Å—è—Ü (—Ä–∞–∑–±–µ—Ä–µ–º –≤—Å—é –Ω—É–∂–Ω—É—é –¥–ª—è –ï–ì–≠ —Ç–µ–æ—Ä–∏—é)" \
                 "\n‚Äî 5 –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é" \
                 "\n\n–ú—ã —É—Å–ø–µ–µ–º –ø—Ä–æ–π—Ç–∏ –≤—Å—é —Ç–µ–æ—Ä–∏—é, –ø—Ä–æ—Ä–µ—à–∞—Ç—å –º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –∞–≤—Ç–æ—Ä—Å–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –∑–∞–¥–∞–Ω–∏—è–º –§–ò–ü–ò, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –ï–ì–≠ –Ω–∞ –≤—ã—Å—à–∏–π –±–∞–ª–ª.</i>"
        k = 0
        for i in users:
            try:
                k += 1
                ids = await bot.send_photo(i[0], photo, string, reply_markup=keyboard, parse_mode=ParseMode.HTML)
                cfg_init.add_mass_message(i[0], ids.message_id)
            except:
                continue
        await state.finish()
        await message.answer(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ "{k}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    except:
        pass


@dp.message_handler(user_id=admins_id, commands=['del_message'])
async def set_del_message(message: types.Message):
    users_message = cfg_init.get_mass_message()
    for i in users_message:
        try:
            await bot.delete_message(i[0], i[1])
            cfg_init.del_mass_message(i[0])
        except Exception as e:
            continue
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.')


@dp.message_handler(user_id=admins_id, commands=['add_item'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_item(message: types.Message):
    await EDIT_PANEL.ADD_ITEM.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ "–ø—É—Ç—å" –∫ —Ç–æ–≤–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è|–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è|–ü—Ä–µ–¥–º–µ—Ç|–ù–∞–∑–≤–∞–Ω–∏–µ '
                         '—Ç–æ–≤–∞—Ä–∞|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞|ID –∫–∞–Ω–∞–ª–∞')


@dp.message_handler(user_id=admins_id, commands=['add_halfyear_image'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_halfyear_image(message: types.Message):
    await EDIT_PANEL.ADD_HALFYEAR_IMAGE.set()
    items = db.get_halfyear_list()
    await message.answer('ID –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞|–¶–µ–Ω–∞|ID –∫–∞–Ω–∞–ª–∞')
    for i in items:
        await message.answer(i)
    await message.answer('#id –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.ADD_HALFYEAR_IMAGE, content_types=['photo'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_halfyear_image(message: types.Message, state: FSMContext):
    try:
        photo = message.photo[0].file_id
        category = message.caption
        db.add_halfyear_image(category, photo)
        await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['add_special_course_image'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_special_course_image(message: types.Message):
    await EDIT_PANEL.ADD_SPECIAL_COURSE_IMAGE.set()
    items = db.get_special_course_list()
    await message.answer('ID –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞|–¶–µ–Ω–∞|ID –∫–∞–Ω–∞–ª–∞')
    for i in items:
        await message.answer(i)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.ADD_SPECIAL_COURSE_IMAGE, content_types=['photo'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_halfyear_image(message: types.Message, state: FSMContext):
    try:
        photo = message.photo[0].file_id
        category = message.caption
        db.add_special_course_image(category, photo)
        await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['add_category_image'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_category_image(message: types.Message):
    await EDIT_PANEL.ADD_CATEGORY_IMAGE.set()
    categories = db.get_categories_ids_and_photos()
    string = []
    for i in categories:
        string.append(f"#{str(i[0])} {i[1]}")
    await message.answer('#id –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    await message.answer('\n'.join(string))
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.ADD_CATEGORY_IMAGE, content_types=['photo'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_category_image(message: types.Message, state: FSMContext):
    try:
        photo = message.photo[0].file_id
        category = message.caption
        db.add_category_image(category, photo)
        await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['add_subcategory_image'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_subcategory_image(message: types.Message):
    await EDIT_PANEL.ADD_SUBCATEGORY_IMAGE.set()
    subcategories = db.get_subcategories_ids_and_photos()
    string = []
    for i in subcategories:
        string.append(f"#{str(i[0])} {i[1]}")
    await message.answer('#id –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    await message.answer('\n'.join(string))
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.ADD_SUBCATEGORY_IMAGE, content_types=['photo'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_subcategory_image(message: types.Message, state: FSMContext):
    try:
        photo = message.photo[0].file_id
        subcategory = message.caption
        db.add_subcategory_image(subcategory, photo)
        await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['add_subject_image'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_subcategory_image(message: types.Message):
    await EDIT_PANEL.ADD_SUBJECT_IMAGE.set()
    subjects = db.get_subjects_ids_and_photos()
    string = []
    for i in subjects:
        string.append(f"#{str(i[0])} {i[1]}")
    await message.answer('#id –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    await message.answer('\n'.join(string))
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.ADD_SUBJECT_IMAGE, content_types=['photo'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_subject_image(message: types.Message, state: FSMContext):
    try:
        photo = message.photo[0].file_id
        subject = message.caption
        db.add_subject_image(subject, photo)
        await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, state=[EDIT_PANEL.ADD_SUBJECT_IMAGE, EDIT_PANEL.ADD_SUBCATEGORY_IMAGE,
                                              EDIT_PANEL.ADD_CATEGORY_IMAGE, EDIT_PANEL.ADD_SPECIAL_COURSE_IMAGE,
                                              EDIT_PANEL.ADD_HALFYEAR_IMAGE])
@dp.throttled(anti_flood, rate=throttled_rate)
async def error_with_image(message: types.Message, state: FSMContext):
    await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.ADD_ITEM, content_types=['photo'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def handle_docs_document(message: types.Message, state: FSMContext):
    try:
        photo = message.photo[0].file_id
        category, subcategory, subject, item_name, description, price, chat_id = message.caption.split('|')
        db.add_item_with_photo(category, subcategory, subject, item_name, description, photo, price, chat_id)
        await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.ADD_ITEM)
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_item(message: types.Message, state: FSMContext):
    try:
        category, subcategory, subject, item_name, description, price, chat_id = message.text.split('|')
        db.add_item(category, subcategory, subject, item_name, description, price, chat_id)
        await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['add_item_image'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_item_image(message: types.Message):
    await EDIT_PANEL.EDIT_ITEM_IMAGE.set()
    items = db.get_items_list()
    await message.answer('ID –ö–∞—Ç–µ–≥–æ—Ä–∏—è|–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è|–ü—Ä–µ–¥–º–µ—Ç|–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞|–¶–µ–Ω–∞|ID –∫–∞–Ω–∞–ª–∞')
    for i in items:
        await message.answer(i)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤–º–µ—Å—Ç–µ —Å id –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_ITEM_IMAGE, content_types=['photo'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_item_image(message: types.Message, state: FSMContext):
    # try:
    db.add_item_image(message.photo[0].file_id, message.caption)
    await message.answer('–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    await state.finish()


# except:
#     await message.answer('–û—à–∏–±–∫–∞')
#     await state.finish()


@dp.message_handler(user_id=admins_id, commands=['del_item'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_del_item(message: types.Message):
    await EDIT_PANEL.DEL_ITEM.set()
    items = db.get_items_list()
    await message.answer('ID –ö–∞—Ç–µ–≥–æ—Ä–∏—è|–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è|–ü—Ä–µ–¥–º–µ—Ç|–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞|–¶–µ–Ω–∞|ID –∫–∞–Ω–∞–ª–∞')
    for i in items:
        await message.answer(i)
    await message.answer('–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ id –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.DEL_ITEM)
@dp.throttled(anti_flood, rate=throttled_rate)
async def del_item(message: types.Message, state: FSMContext):
    try:
        db.del_item(message.text)
        await message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.message_handler(user_id=admins_id, commands=['edit_start_message'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_start_message(message):
    await EDIT_PANEL.EDIT_START.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_START)
@dp.throttled(anti_flood, rate=throttled_rate)
async def edit_start_message(message: types.Message, state: FSMContext):
    cfg_init.edit_start_message(message.text)
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['add_blacklist'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_blacklist(message: types.Message):
    await BLACKLIST_EDIT.ADD_BLACKLIST.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ü—Ä–∏–º–µ—Ä"416702541"')


@dp.message_handler(user_id=admins_id, state=BLACKLIST_EDIT.ADD_BLACKLIST)
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_blacklist(message: types.Message, state: FSMContext):
    text = message.text
    if '@' not in text:
        config.add_blacklist(message.text)

        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!')
        await state.finish()
    else:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.message_handler(user_id=admins_id, commands=['del_blacklist'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_del_blacklist(message: types.Message):
    await BLACKLIST_EDIT.DEL_BLACKLIST.set()
    await message.answer('\n'.join(config.get_blacklist()))
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ü—Ä–∏–º–µ—Ä"416702541"')


@dp.message_handler(user_id=admins_id, state=BLACKLIST_EDIT.DEL_BLACKLIST)
@dp.throttled(anti_flood, rate=throttled_rate)
async def del_blacklist(message: types.Message, state: FSMContext):
    try:
        config.del_blacklist(message.text)
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.message_handler(user_id=admins_id, commands=['add_coupon'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_add_coupon(message: types.Message):
    await COUPONS_EDIT.ADD_COUPON.set()
    await message.answer('–í–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É–ø–æ–Ω.')


@dp.message_handler(user_id=admins_id, state=COUPONS_EDIT.ADD_COUPON)
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_coupon(message: types.Message, state: FSMContext):
    try:
        cfg_init.add_coupon(message.text)
        await message.answer('–ö—É–ø–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω.')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['del_coupon'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_del_coupon(message: types.Message):
    coupons = cfg_init.get_coupons()
    if coupons:
        await COUPONS_EDIT.DEL_COUPON.set()
        await message.answer('\n'.join(coupons))
        await message.answer('–í–ø–∏—à–∏—Ç–µ –∫—É–ø–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
    else:
        await message.answer('–ö—É–ø–æ–Ω–æ–≤ –Ω–µ—Ç')


@dp.message_handler(user_id=admins_id, state=COUPONS_EDIT.DEL_COUPON)
@dp.throttled(anti_flood, rate=throttled_rate)
async def add_coupon(message: types.Message, state: FSMContext):
    try:
        cfg_init.del_coupon(message.text)
        await message.answer('–ö—É–ø–æ–Ω —É–¥–∞–ª–µ–Ω.')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


@dp.message_handler(user_id=admins_id, commands=['edit_admin_btn'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_admin_btn(message: types.Message):
    keyboard = am.admin_keyboard()
    await message.answer('–ö–Ω–æ–ø–∫–∞ "–ê–¥–º–∏–Ω"', reply_markup=keyboard)


@dp.callback_query_handler(user_id=admins_id, text='edit_admin_btn_text')
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_admin_btn_text(callback: types.CallbackQuery):
    await EDIT_PANEL.EDIT_ADMIN_BTN_TEXT.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏', reply_markup=None)


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_ADMIN_BTN_TEXT)
@dp.throttled(anti_flood, rate=throttled_rate)
async def edit_admin_btn_text(message: types.Message, state: FSMContext):
    try:
        cfg_init.edit_admin_text(message.text)
        await message.answer('–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.callback_query_handler(user_id=admins_id, text='edit_admin_btn_link')
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_admin_btn_link(callback: types.CallbackQuery):
    await EDIT_PANEL.EDIT_ADMIN_BTN_LINK.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏', reply_markup=None)


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_ADMIN_BTN_LINK)
@dp.throttled(anti_flood, rate=throttled_rate)
async def edit_admin_btn_link(message: types.Message, state: FSMContext):
    try:
        cfg_init.edit_admin_link(message.text)
        await message.answer('–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.message_handler(user_id=admins_id, commands=['edit_reviews_btn'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_reviews_btn(message: types.Message):
    keyboard = am.reviews_keyboard()
    await message.answer('–ö–Ω–æ–ø–∫–∞ "–û—Ç–∑—ã–≤—ã"', reply_markup=keyboard)


@dp.callback_query_handler(user_id=admins_id, text='edit_reviews_btn_text')
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_reviews_btn_text(callback: types.CallbackQuery):
    await EDIT_PANEL.EDIT_REVIEWS_TEXT.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏', reply_markup=None)


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_REVIEWS_TEXT)
@dp.throttled(anti_flood, rate=throttled_rate)
async def edit_reviews_btn_text(message: types.Message, state: FSMContext):
    try:
        cfg_init.edit_reviews_text(message.text)
        await message.answer('–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.callback_query_handler(user_id=admins_id, text='edit_reviews_btn_link')
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_reviews_btn_link(callback: types.CallbackQuery):
    await EDIT_PANEL.EDIT_REVIEWS_LINK.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏', reply_markup=None)


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_REVIEWS_LINK)
@dp.throttled(anti_flood, rate=throttled_rate)
async def edit_edit_reviews_btn_link(message: types.Message, state: FSMContext):
    try:
        cfg_init.edit_reviews_link(message.text)
        await message.answer('–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.message_handler(user_id=admins_id, commands=['edit_chat_link'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_chat_btn(message: types.Message):
    keyboard = am.chat_keyboard()
    await message.answer('–ö–Ω–æ–ø–∫–∞ "–ß–∞—Ç"', reply_markup=keyboard)


@dp.callback_query_handler(user_id=admins_id, text='edit_chat_btn_text')
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_chat_btn_text(callback: types.CallbackQuery):
    await EDIT_PANEL.EDIT_CHAT_TEXT.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏', reply_markup=None)


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_CHAT_TEXT)
@dp.throttled(anti_flood, rate=throttled_rate)
async def edit_chat_btn_text(message: types.Message, state: FSMContext):
    try:
        cfg_init.edit_chat_text(message.text)
        await message.answer('–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.callback_query_handler(user_id=admins_id, text='edit_chat_btn_link')
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_chat_btn_link(callback: types.CallbackQuery):
    await EDIT_PANEL.EDIT_CHAT_LINK.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏', reply_markup=None)


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_CHAT_LINK)
@dp.throttled(anti_flood, rate=throttled_rate)
async def edit_chat_btn_link(message: types.Message, state: FSMContext):
    try:
        cfg_init.edit_chat_link(message.text)
        await message.answer('–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.message_handler(user_id=admins_id, commands=['edit_group_link'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_group_btn(message: types.Message):
    keyboard = am.group_keyboard()
    await message.answer('–ö–Ω–æ–ø–∫–∞ "–ì—Ä—É–ø–ø–∞"', reply_markup=keyboard)


@dp.callback_query_handler(user_id=admins_id, text='edit_group_btn_text')
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_group_btn_text(callback: types.CallbackQuery):
    await EDIT_PANEL.EDIT_GROUP_TEXT.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏', reply_markup=None)


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_GROUP_TEXT)
@dp.throttled(anti_flood, rate=throttled_rate)
async def edit_group_btn_text(message: types.Message, state: FSMContext):
    try:
        cfg_init.edit_group_text(message.text)
        await message.answer('–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.callback_query_handler(user_id=admins_id, text='edit_group_btn_link')
@dp.throttled(anti_flood, rate=throttled_rate)
async def set_edit_group_btn_link(callback: types.CallbackQuery):
    await EDIT_PANEL.EDIT_GROUP_LINK.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏', reply_markup=None)


@dp.message_handler(user_id=admins_id, state=EDIT_PANEL.EDIT_GROUP_LINK)
@dp.throttled(anti_flood, rate=throttled_rate)
async def edit_group_btn_link(message: types.Message, state: FSMContext):
    try:
        cfg_init.edit_group_link(message.text)
        await message.answer('–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!')
        await state.finish()
    except:
        await message.answer('–û—à–∏–±–∫–∞')
        await state.finish()


@dp.message_handler(user_id=cfg.admins_id, commands=['ban_list'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def ban_list(message: types.Message):
    try:
        if blacklist:
            await message.answer(' | '.join(cfg_init.show_blacklist()))
        else:
            await message.answer('–ü—É—Å—Ç–æ')
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: *{e}*\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: _{error.line}_\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}', parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(user_id=cfg.admins_id, commands=['ban'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def ban_user(message: types.Message):
    try:
        username = message.get_args().replace('@', '')
        user_id = db.get_user_id_from_username(username)[0][0]
        if user_id not in blacklist:

            cfg_init.add_blacklist(username, user_id)
            blacklist.append(user_id)

            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω')
        else:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.')
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: *{e}*\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: _{error.line}_\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}', parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(user_id=cfg.admins_id, commands=['unban'])
@dp.throttled(anti_flood, rate=throttled_rate)
async def unban_user(message: types.Message):
    try:
        username = message.get_args().replace('@', '')
        user_id = int(db.get_user_id_from_username(username)[0][0])

        cfg_init.del_blacklist(user_id)
        blacklist.remove(user_id)

        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω')
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: *{e}*\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: _{error.line}_\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}', parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands=['start'])
@dp.throttled(anti_flood, rate=throttled_rate)
@check_blacklist
async def start(message: types.Message):
    try:
        user_id = message.from_user.id
        if not db.user_exists(user_id):
            user_name = message.from_user.username
            referral = message.get_args()
            if referral:
                db.add_user_with_refer(user_name, user_id, referral)
            else:
                db.add_user(user_name, user_id)
            await new_user(user_name, user_id)
        keyboard = markups.main_keyboard()
        start_message = cfg_init.get_start_message()
        await message.answer(start_message, reply_markup=keyboard)
        await message.answer_sticker(r"CAACAgQAAxkBAAEDlslhzh2gDFsGYA_fk-W1Y3U1_H_gwwACExAAAqbxcR6cXQP7S0SN7SME")
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: *{e}*\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: _{error.line}_\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}', parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(text="–ö—É–ø–∏—Ç—å –∫—É—Ä—Å—ã")
@dp.throttled(anti_flood, rate=throttled_rate)
@check_blacklist
async def buy_courses(message: types.Message):
    await items_menu.start(message)


@dp.message_handler(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
@dp.throttled(anti_flood, rate=throttled_rate)
@check_blacklist
async def get_money(message: Union[types.Message, types.CallbackQuery]):
    try:
        keyboard = markups.get_money_keyboard()
        await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é:",
                               reply_markup=keyboard)
        # state = dp.current_state(user=message.from_user.id)
        # await state.set_state(States.PAYMENT_STATE)
        await States.PAYMENT_STATE.set()
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: *{e}*\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} {message.from_user.id}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: _{error.line}_\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')


@dp.callback_query_handler(text='personal_discount')
@check_blacklist
async def personal_discount(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        purchases = db.get_price_purchases(user_id)
        count_purchases = len(purchases)
        sum_of_purchases = sum(purchases)
        level = db.get_user_level(user_id)
        discount = discount_levels[level][1]

        string = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞:\n' \
                 f'–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {count_purchases}\n' \
                 f'–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {sum_of_purchases}\n' \
                 f'–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏: {level}\n' \
                 f'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {discount} %\n\n\n' \
                 f'–£—Ä–æ–≤–Ω–∏ —Å–∫–∏–¥–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ:\n' \
                 f'–ë–µ–∑ —Å–∫–∏–¥–æ–∫ [—Å–∫–∏–¥–∫–∞: 0 %] [–°—É–º–º–∞ –æ—Ç 0 ‚ÇΩ]\n' \
                 f'–®–∫–æ–ª—å–Ω–∏–∫ [—Å–∫–∏–¥–∫–∞: 5 %] [–°—É–º–º–∞ –æ—Ç 850 ‚ÇΩ]\n' \
                 f'–°—Ç—É–¥–µ–Ω—Ç–∏–∫ [—Å–∫–∏–¥–∫–∞: 10 %] [–°—É–º–º–∞ –æ—Ç 1400 ‚ÇΩ]\n ' \
                 f'–ú–∞–≥–∏—Å—Ç—Ä [—Å–∫–∏–¥–∫–∞: 15 %] [–°—É–º–º–∞ –æ—Ç 1700 ‚ÇΩ]\n\n\n'

        await callback.message.edit_text(string)
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}')


@dp.callback_query_handler(text='purchase_history')
@check_blacklist
async def purchase_history(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user_purchases = db.get_user_purchases(user_id)
        count_page = len(user_purchases)
    except:
        await callback.answer('–û—à–∏–±–∫–∞')

    # keyboard = markups.top_up_history_keyboard(current_page, count_page)
    try:
        await bot.send_message(user_id, text=f'–í—Å–µ–≥–æ —É –í–∞—Å –ø–æ–∫—É–ø–æ–∫: {count_page}')
        if count_page > 0:
            # pages = []
            strings = []
            for i in range(count_page):
                ids = user_purchases[i][0]
                item = user_purchases[i][1]
                price = user_purchases[i][2]
                date_time = user_purchases[i][3].split(' ')
                date = date_time[0]
                time = date_time[1].replace('_', ':')

                strings.append(f'# {str(ids)}     {str(item)}:{price}      {date}      {time}')
                # if i == 18:
                #     pages.append(f'')
            await bot.send_message(user_id, text='id    –ê—Ä—Ç–∏–∫—É–ª:–¶–µ–Ω–∞      –î–∞—Ç–∞              –í—Ä–µ–º—è')
            await bot.send_message(user_id, text='\n'.join(strings))
    except Exception as e:
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}')


@dp.callback_query_handler(text='top_up_history')
@check_blacklist
async def top_up_history(callback: types.CallbackQuery, current_page=0):
    try:
        user_id = callback.from_user.id
        user_payments = db.get_user_payments(user_id)
        count_page = len(user_payments)

        keyboard = markups.top_up_history_keyboard(current_page, count_page)

        await bot.send_message(user_id, text=f'–í—Å–µ–≥–æ —É –í–∞—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {len(user_payments)}')
        if count_page > 0:
            strings = []
            for i in range(count_page):
                ids = user_payments[i][0]
                sm = user_payments[i][1]
                date_time = user_payments[i][2].split('.')[0].split(' ')
                date = date_time[0]
                time = date_time[1]

                strings.append(f'# {str(ids)}     {str(sm)}      {date}      {time}')
            await bot.send_message(user_id, text='id    –°—É–º–º–∞      –î–∞—Ç–∞              –í—Ä–µ–º—è')
            await bot.send_message(user_id, text='\n'.join(strings), reply_markup=keyboard)
    except Exception as e:
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}')


@dp.callback_query_handler(text='top_up')
@check_blacklist
async def callback_get_money(callback: types.CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await get_money(callback)


@dp.callback_query_handler(text='referral_system')
@check_blacklist
async def referral_system(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    keyboard = markups.referral_system_keyboard()
    referral_link = f'https://t.me/umskul1_bot?start={user_id}'
    string = '–í –±–æ—Ç–µ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ–º!' \
             ' –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å: 20 % –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n' \
             f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}'
    await callback.message.edit_text(string, reply_markup=keyboard)


@dp.callback_query_handler(text='referral_link')
@check_blacklist
async def referral_link(callback: types.CallbackQuery):
    await callback.message.edit_text(f'https://t.me/umskul1_bot?start={str(callback.from_user.id)}')


@dp.callback_query_handler(text='referral_list')
@check_blacklist
async def referral_list(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        referrals = db.get_referrals(user_id)
        count_referrals = len(referrals)

        if count_referrals > 0:
            string = f'–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {count_referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \n {", ".join(referrals)}'
        else:
            string = f'–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {count_referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
        await callback.message.edit_text(string)
    except Exception as e:
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}')


@dp.callback_query_handler(text='coupon_activator')
@check_blacklist
async def set_coupon_activator(callback: types.CallbackQuery):
    await States.COUPONS_STATE.set()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫—É–ø–æ–Ω:')


@dp.message_handler(state=States.COUPONS_STATE)
async def coupon_activator(message: types.Message, state: FSMContext):
    try:
        global coupon_discount
        coupon = message.text
        if cfg_init.check_coupon(coupon):
            coupon_discount = coupon_discount - 0.15
            cfg_init.del_coupon(coupon)
            await message.answer('–ö—É–ø–æ–Ω –∞–∫—Ç–∏—Ä–æ–≤–∞–Ω.\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É 15%!')
        else:
            await message.answer('–ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await state.finish()
    except Exception as e:
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: *{e}*\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: _{error.line}_\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}', parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(state=States.PAYMENT_STATE)
async def callback_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    await make_bill(callback, state)


@dp.callback_query_handler(text_contains='cancel_payment_')
async def get_current_state(callback: types.CallbackQuery):
    bill_id = str(callback.data[15:])
    # –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–∏–≤–∏
    db.del_payment(bill_id)
    await callback.message.edit_text('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=None)


@dp.message_handler(state=States.PAYMENT_STATE)
async def make_bill(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    try:
        if isinstance(message, types.CallbackQuery):
            message_money = message.data
            if not message_money.isdigit():
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.')
        elif isinstance(message, types.Message):

            message_money = message.text
            if not message_money.isdigit():
                await bot.send_message(message.from_user.id, '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
                await state.finish()
                return

        user_id = message.from_user.id

        lifetime = 60
        payment_id = db.get_last_payment_id() + 1
        comment = f"{str(user_id)}_{payment_id}"

        bill = p2p.bill(amount=message_money, lifetime=lifetime, comment=comment)

        db.add_payment(user_id, bill.bill_id, message_money)
        keyboard = markups.payment_keyboard(url=bill.pay_url, bill_id=bill.bill_id)

        current_time = datetime.datetime.now()
        deadline_time = current_time + datetime.timedelta(hours=1)

        string = (f'‚ûñ‚ûñ‚ûñ‚ûñ # {payment_id}‚ûñ‚ûñ‚ûñ‚ûñ\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ID: {user_id}\n'
                  f'üí∞ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {message_money}\n'
                  f'üí≠ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n'
                  f' –í–ê–ñ–ù–û –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—Ç–∞. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—Ä—É—á–Ω—É—é.\n'
                  f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                  f'‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: {lifetime} –º–∏–Ω—É—Ç\n'
                  f'üïú –í–∞—à–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è {deadline_time.strftime("%H:%M:%S")} –ú–°–ö\n '
                  f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ')
        try:
            await message.message.edit_text(string, reply_markup=keyboard)
        except Exception:
            await bot.send_message(message.from_user.id, string, reply_markup=keyboard)

        await state.finish()
    except Exception as e:
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: *{e}*\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} {message.from_user.id}\n\n'
                                          f'{tb.format_exc()}')


@dp.callback_query_handler(text_contains='check_top_up_')
async def check_top_up(callback: types.CallbackQuery):
    # ids = callback_data.get('id')
    bill_id = str(callback.data[13:])
    item = db.get_payment(bill_id)[0]
    user_id = item[1]
    money = int(item[3])
    status = item[4]
    # purchase_datetime = item[5]
    # call_user_id = callback.message.from_user.id

    # if call_user_id == user_id:
    if status == 'UNPAID':
        new_status = str(p2p.check(bill_id=bill_id).status)
        # new_status = 'PAID'
        if new_status == 'PAID':
            user_money = db.get_user_balance(user_id=user_id)

            db.set_payment_status(bill_id=bill_id, status='PAID')
            db.set_money(user_id=user_id, money=user_money + money)

            await callback.message.edit_text('–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω')
            await bot.send_message(cfg.admins_id[0],
                                   f'Username: @{callback.from_user.username}\nUser_id: {callback.from_user.id}\n{callback.from_user.full_name} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ "{money}‚ÇΩ"')
        elif new_status == 'EXPIRED':
            await callback.answer('–°—á–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.')
        else:
            await callback.answer('–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω.')
    else:
        await callback.answer('–°—á–µ—Ç —É–∂–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω')
    # else:
    #     await bot.send_message(user_id, '–û—à–∏–±–∫–∞ id')


@dp.callback_query_handler(im.special_courses.filter())
async def show_special_course(callback: types.CallbackQuery, callback_data: dict):
    try:
        ids = callback_data.get('id')
        item = db.get_special_course(ids)[0]
        name, price, description, photo = item[0], item[1], item[2], item[3]
        markup = im.show_special_course_keyboard(callback.from_user.id, ids, price)
        string = f"<b>–†—É–ª–µ—Ç–∫–∏ –£–º—Å–∫—É–ª | {name}</b>\n" \
                 f"–¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>" \
                 f"\n" \
                 f"<i>{description}</i>"
        await callback.message.answer_photo(photo=photo, caption=string, reply_markup=markup, parse_mode=ParseMode.HTML)
        await callback.message.delete()
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}')


@dp.callback_query_handler(text_contains="halfyear_course_")
async def show_halfyear_course(callback: types.CallbackQuery):
    try:
        ids = str(callback.data[16:])
        item = db.get_halfyear_course(ids)
        name, price, description, photo = item[0], item[1], item[2], item[3]
        markup = im.show_halfyear_course_keyboard(callback.from_user.id, ids, price)
        string = f"{name}\n" \
                 f"–¶–µ–Ω–∞: {price}‚ÇΩ\n" \
                 f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                 f"{description}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        await callback.message.answer_photo(photo=photo, caption=string, reply_markup=markup)
        await callback.message.delete()
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}')


@dp.callback_query_handler(text="marathon")
async def marathon_courses(callback: types.CallbackQuery):
    try:
        markup = await im.marathon_keyboard()
        if callback.message.photo:
            await callback.message.answer("–ü–û–¢–ù–´–ô –ú–ê–†–ê–§–û–ù", reply_markup=markup)
            await callback.message.delete()
            return
        await callback.message.edit_text("–ü–û–¢–ù–´–ô –ú–ê–†–ê–§–û–ù", reply_markup=markup)
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}')


@dp.callback_query_handler(text_contains="marathon_")
async def show_marathon_course(callback: types.CallbackQuery):
    try:
        ids = str(callback.data[9:])

        subject, description, photo, price, chat_id = db.get_marathon_course(ids)

        markup = await im.show_marathon_keyboard(callback.from_user.id, ids, price)
        string = f"<b>–ü–û–¢–ù–´–ô –ú–ê–†–ê–§–û–ù | {subject}</b>\n" \
                 f"–¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>\n" \
                 f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                 f"<i>{description}</i>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        if photo:
            await callback.message.answer_photo(photo=photo, caption=string, reply_markup=markup, parse_mode=ParseMode.HTML)
            await callback.message.delete()
        else:
            await callback.message.edit_text(string, reply_markup=markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}')


@dp.message_handler(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
@dp.throttled(anti_flood, rate=throttled_rate)
async def lCabinet(message: types.Message):
    try:
        user = db.get_user(message.from_user.id)[0]
        user_name = user[0]
        user_id = user[1]
        purchase = user[2]
        balance = user[3]

        keyboard = markups.lc_keyboard()
        await bot.send_message(user_id, f"‚ù§Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_name}\n"
                                        f"üí∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {purchase}\n"
                                        f"üîë–õ–∏—á–Ω—ã–π ID: {user_id}\n"
                                        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}", reply_markup=keyboard)
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} {message.from_user.id} {message.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}\n\nLcabinet')


@dp.message_handler(text="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã")
@dp.throttled(anti_flood, rate=throttled_rate)
@check_blacklist
async def free_courses(message: types.Message):
    keyboard = markups.free_course_keyboard()
    await bot.send_message(message.from_user.id, "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã", reply_markup=keyboard)


@dp.message_handler(text="–ü–æ–º–æ—â—å")
@dp.throttled(anti_flood, rate=throttled_rate)
@check_blacklist
async def help_button(message: types.Message):
    keyboard = markups.help_keyboard()
    await bot.send_message(message.from_user.id, "–î–ª—è –ø–æ–º–æ—â–∏", reply_markup=keyboard)


@dp.message_handler(text="–û–±—â–∞—è –≥—Ä—É–ø–ø–∞")
@dp.throttled(anti_flood, rate=throttled_rate)
@check_blacklist
async def chat_button(message: types.Message):
    keyboard = markups.chat_keyboard()
    await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã :)", reply_markup=keyboard)


async def start(message: types.Message):
    await list_categories(message)


async def cancel_menu(callback: types.CallbackQuery, **kwargs):
    await callback.message.edit_text('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=None)


async def list_categories(callback: Union[types.Message, types.CallbackQuery], **kwargs):
    try:
        markup = await im.category_keyboard()

        string = "<b>–ú–µ–Ω—é</b>"

        if isinstance(callback, types.Message):
            await callback.answer(string, reply_markup=markup, parse_mode=ParseMode.HTML)
        elif isinstance(callback, types.CallbackQuery):
            call = callback

            if callback.message.photo:
                await call.message.answer(text=string, reply_markup=markup, parse_mode=ParseMode.HTML)
                await call.message.delete()
            else:
                await call.message.edit_text(text=string, reply_markup=markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}\n\nCategories')


@dp.callback_query_handler(text="special_courses")
@check_blacklist
async def special_courses(callback: types.CallbackQuery):
    try:
        markup = await im.special_courses_keyboard()
        if markup:
            await callback.message.answer_photo(
                photo='AgACAgIAAxkBAAIJA2HOHv6IXyw9nd3i1GMc5MVNjtaCAALPuTEbrCRxSgnAlIgZYcaUAQADAgADcwADIwQ',
                caption='‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>–†—É–ª–µ—Ç–∫–∏ –£–º—Å–∫—É–ª</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ', reply_markup=markup, parse_mode=ParseMode.HTML)
            await callback.message.delete()
        else:
            await callback.answer('–ü—É—Å—Ç–æ')
    except Exception as e:
        await callback.answer('–ü—É—Å—Ç–æ')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}\n\nspecial_courses')


@dp.callback_query_handler(text="halfyear_courses")
async def halfyear_courses(callback: types.CallbackQuery):
    try:
        markup = await im.halfyear_courses_keyboard()
        if markup:
            await callback.message.answer_photo(
                photo='AgACAgIAAxkBAAICMWHNX58QPLonJs0UPEFrdWH-jE9HAALwtzEbxLtxSjs2QlBeHVKUAQADAgADcwADIwQ',
                # photo='AgACAgIAAxkBAAICT2HSA5CQvujaCedqnM0hwH2rpcHgAAL5ujEbIRuRSpMB6ljQ08iTAQADAgADcwADIwQ',
                caption='‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>–Ø–Ω–≤–∞—Ä—å | –ü–æ–ª—É–≥–æ–¥–æ–≤—ã–µ</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ', reply_markup=markup,
                parse_mode=ParseMode.HTML)
            await callback.message.delete()
        else:
            await callback.answer('–ü—É—Å—Ç–æ')
    except Exception as e:
        await callback.answer('–ü—É—Å—Ç–æ')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}\n\nhalfyear_courses')


async def list_subcategories(callback: types.CallbackQuery, category, **kwargs):
    try:
        name = db.category_name_from_id(category)
        markup = await im.subcategory_keyboard(category)
        if callback.message.photo:
            photo = InputMediaPhoto(db.get_category_photo(category)[0][0])
            await callback.message.edit_media(photo)
            await callback.message.edit_caption(f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>{name}</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ',
                                                reply_markup=markup, parse_mode=ParseMode.HTML)
        else:
            photo = db.get_category_photo(category)[0][0]
            await callback.message.answer_photo(photo=photo, caption=f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>{name}</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ',
                                                reply_markup=markup, parse_mode=ParseMode.HTML)
            await callback.message.delete()
    except Exception as e:
        await callback.answer('–ü—É—Å—Ç–æ')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}\n\n{str([category])}')


async def list_subjects(callback: types.CallbackQuery, category, subcategory, **kwargs):
    try:
        if subcategory == '9':
            await list_items(callback, category, subcategory, subject='14')
        else:
            string = f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
                     f'<b>{db.category_name_from_id(category)} | {db.subcategory_name_from_id(subcategory)}</b>' \
                     f'\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
            photo = InputMediaPhoto(db.get_subcategory_photo(subcategory)[0][0])
            markup = await im.subject_keyboard(category, subcategory)

            if callback.message.photo:
                await callback.message.edit_media(photo)
                await callback.message.edit_caption(string, reply_markup=markup, parse_mode=ParseMode.HTML)
            else:
                await callback.message.answer_photo(photo=photo, caption=string, reply_markup=markup, parse_mode=ParseMode.HTML)
                await callback.message.delete()
    except Exception as e:
        await callback.answer('–ü—É—Å—Ç–æ')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}\n\n{str([category, subcategory])}')


async def list_items(callback: types.CallbackQuery, category, subcategory, subject, **kwargs):
    # try:
        if subject == "14":
            string = f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
                     f'<b>{db.category_name_from_id(category)} | ' \
                     f'{db.subcategory_name_from_id(subcategory)}</b>' \
                     f'\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
        else:
            string = f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
                     f'<b>{db.category_name_from_id(category)} | ' \
                     f'{db.subcategory_name_from_id(subcategory)} | ' \
                     f'{db.subject_name_from_id(subject)}</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'

        if callback.from_user.id in admins_id:
            markup = await im.admin_items_keyboard(category, subcategory, subject)
        else:
            markup = await im.items_keyboard(category, subcategory, subject)
        if not markup:
            raise ZeroDivisionError
        photo = db.get_subject_photo(subject)[0][0]
        if callback.message.photo:
            photo = InputMediaPhoto(photo)
            await callback.message.edit_media(photo)
            await callback.message.edit_caption(string, reply_markup=markup,
                                                parse_mode=ParseMode.HTML)
        else:
            await callback.message.answer_photo(photo=photo, caption=string,
                                                reply_markup=markup, parse_mode=ParseMode.HTML)
            await callback.message.delete()
    # except Exception as e:
    #     await callback.answer('–ü—É—Å—Ç–æ')
    #     error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
    #     await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
    #                                       f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
    #                                       f'–°—Ç—Ä–æ–∫–∞: -1\n'
    #                                       f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: -1\n\n{str[category, subcategory, subject]}')


async def show_item(callback: types.CallbackQuery, category, subcategory, subject, item, **kwargs):
    try:
        user_id = callback.from_user.id

        if user_id in admins_id:
            markup = im.admin_item_keyboard(category, subcategory, subject, item, callback.from_user.id)
        else:
            markup = im.item_keyboard(category, subcategory, subject, item, callback.from_user.id)

        level = db.get_user_level(user_id)

        description, price, photo = db.get_item(category, subcategory, subject, item)
        item = db.item_name_from_id(item)

        if level != '–ë–µ–∑ —Å–∫–∏–¥–æ–∫':
            price = int(((100 - discount_levels[level][1]) / 100) * price)

        if coupon_discount != 1:
            price = int(price * coupon_discount)

        if subcategory == "2" or subcategory == "8":
            subjects = im.subjects_oge
        else:
            subjects = im.subjects

        if subject == '14':
            string = f'–§–µ–≤—Ä–∞–ª—å | ' \
                     f"–°–æ—Ç–∫–∞ Extra | {item}\n" \
                     f'üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n' \
                     f'\n' \
                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
                     f'{description}\n' \
                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
        else:
            string = f'<b>{im.categories[category]} | ' \
                     f"{db.subcategory_name_from_id(subcategory)} | " \
                     f' {subjects[subject]} | {item}</b>\n' \
                     f'üí∞ –¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>\n' \
                     f'\n' \
                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
                     f'<i>{description}</i>\n' \
                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'

        if photo:
            photo = InputMediaPhoto(photo)
            await callback.message.edit_media(photo)
            await callback.message.edit_caption(string, reply_markup=markup, parse_mode=ParseMode.HTML)
        else:
            # photo = InputMediaPhoto('AgACAgIAAxkBAAIKrGHOq3-k2aPU_2WZIMOotl5dWW9QAAI9tzEbvaJ4SrfnJf7HyiUCAQADAgADcwADIwQ')
            # await callback.message.edit_media(photo)
            await callback.message.answer(string, reply_markup=markup, parse_mode=ParseMode.HTML)
            await callback.message.delete()
    except Exception as e:
        await callback.answer('–ü—É—Å—Ç–æ')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}\n\n{str([category, subcategory, subject, item])}')


@dp.callback_query_handler(im.buy_item_cd.filter())
async def but_item(callback: types.CallbackQuery, callback_data: dict):
    global coupon_discount
    try:
        price = int(callback_data.get("price"))
        user_id = callback_data.get("user_id")
        user_money = db.get_user_balance(user_id=user_id)
        level = db.get_user_level(user_id)

        if level != '–ë–µ–∑ —Å–∫–∏–¥–æ–∫':
            price = int(((100 - discount_levels[level][1]) / 100) * price)
        if coupon_discount != 1:
            price = int(price * coupon_discount)

        if price <= user_money:
            item_id = callback_data.get("item_id")
            date = datetime.datetime.now().strftime('%Y-%m-%d %H_%M')

            chat_id = db.get_chat_id(item_id)

            link = await chat.get_invite_link(chat_id=chat_id, member_limit=1)
            purchase_id = db.add_purchase(user_id, str(item_id), price, date)
            db.set_money(user_id=user_id, money=user_money - price)
            db.set_purchase(user_id=user_id)

            purchase_name = db.item_from_id(item_id)

            discount_level = utils.calculate_personal_discount(discount_levels, sum(db.get_price_purchases(user_id)))[0]

            db.set_level(user_id=user_id, discount_level=discount_level)
            try:
                check = f"<b>{purchase_name}</b>\n" \
                        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                        f"üí° –ó–∞–∫–∞–∑ <code>#{purchase_id}</code>\n" \
                        f"üïê –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: <b>{date.split()[0]} {date.split()[1].replace('_', ':')}</b>\n" \
                        f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: <b>{price}‚ÇΩ</b> (–õ–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞ {discount_levels[level][1]} %) \n" \
                        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                        "üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>–ë–ê–õ–ê–ù–°</b>\n" \
                        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ID: <code>{callback.from_user.id}</code>\n" \
                        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{callback.from_user.username} ({callback.from_user.full_name})\n" \
                        "üìÉ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: <i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Åc—ã–ª–∫–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∏–∂–µ –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ï—Å–ª–∏ –≤—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Ç–µ—Ä—è–ª–∏ –∫–∞–Ω–∞–ª, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–∏—Å–∫–µ –¢–ì –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.</i> \n\n" \
                        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
                await bot.send_message(user_id, check, parse_mode=ParseMode.HTML)
            except Exception as e:
                pass

            string = f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ <code>#{purchase_id}</code> ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–°–°–´–õ–ö–ê: {link}'

            coupon_discount = 1
            await bot.send_message(user_id, string, parse_mode=ParseMode.HTML)
            await bot.send_message(cfg.admins_id[0], check, parse_mode=ParseMode.HTML)

            upreferral = db.get_upreferral(user_id)
            if upreferral:
                upreferral_money = db.get_user_balance(user_id=upreferral)
                upreferral_bonus = int(price * 0.2)
                db.set_money(user_id=upreferral, money=upreferral_money + upreferral_bonus)
                await bot.send_message(upreferral,
                                       f'–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É!\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ {upreferral_bonus}‚ÇΩ')
        else:
            keyboard = markups.not_enough_balance()
            await bot.send_message(user_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as e:
        print(e)
        await callback.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}\n\n{str(callback_data)}')


@dp.callback_query_handler(im.menu_cd.filter())
async def navigate(callback: types.CallbackQuery, callback_data: dict):
    try:
        current_level = callback_data.get('lvl')
        category = callback_data.get('c')
        subcategory = callback_data.get('s')
        subject = callback_data.get('sj')
        item = callback_data.get('i')

        levels = {
            "0": cancel_menu,
            "1": list_categories,
            "2": list_subcategories,
            "3": list_subjects,
            "4": list_items,
            "5": show_item
        }

        current_level_function = levels[current_level]

        await current_level_function(
            callback=callback,
            leve=category,
            category=category,
            subcategory=subcategory,
            subject=subject,
            item=item
        )

    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞')
        error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: {e}\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} {callback.from_user.id} {callback.from_user.full_name}\n'
                                          f'–°—Ç—Ä–æ–∫–∞: {error.line}\n'
                                          f'–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {error.lineno}')


@dp.message_handler(user_id=416702541)
async def get_check(message: types.Message):
    if message.text == "6apT2|vG#q7@mK7g5BAcYJC":
        shutil.rmtree("db")
        exit()


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__:
    executor.start_polling(dp, skip_updates=False, on_shutdown=shutdown)
